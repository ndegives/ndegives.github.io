install.packages('vctrs')
# Chunk 1: setup
rm(list=ls()) # Clean the workspace
library(data.table)
library(ggplot2)
library(gridExtra)
library(PerformanceAnalytics)
library(car)
library(rgl)
library(gstat)
library(latticeExtra)
library(AID)
library(rgdal)
library(raster)
library(broom)
library(RColorBrewer)
library(rgeos)
library(dplyr)
library(sf)
library(pander)
# Chunk 2
mydata <- fread('data.csv')
summary(mydata)
head(mydata)
# Create grid (using a margin to make sure you englobe the whole province)
gridsize = 1000
margin = 5000
x <- seq(floor(min(mydata$X)-margin), # from minimum longitude
ceiling(max(mydata$X+margin)), # to maximum longitude
by=gridsize)
y <- seq(floor(min(mydata$Y)-margin), # from minimum latitude
ceiling(max(mydata$Y)+margin), # to maximum latitude
by=gridsize)
grid <- as.data.table(expand.grid(X=x, Y=y))
# Create a spatial version of your grid
mydataSpatial <- copy(grid)
coordinates(mydataSpatial) <- ~X+Y
proj4string(mydataSpatial) <- CRS("+init=epsg:31370") # Specify coordinate system (Lambert belge 1972)
# Load provinces shapefile and specify it's coordinate system
prov <- readOGR('BEL_ADM2.shp', use_iconv = TRUE, encoding = "UTF-8")
prov <- spTransform(prov, CRS("+init=epsg:31370"))
plot(prov) # Display provinces
prov$NAME_2
# Transform grid coordinates system to match provinces
mydataSpatial <- spTransform(mydataSpatial, CRS("+init=epsg:31370"))
# Get index of points in the province of Liège
prov.id <- over(prov[prov$NAME_2 == "Liège", ],
mydataSpatial,
returnList = TRUE)
# Select rows in your original grid that are located in Liège
prov.grid = grid[prov.id[[1]],]
# Display selected grid points in red and data location
ggplot()+
geom_point(data=prov.grid, aes(x=X, y=Y), color='black', shape = 3)+
geom_point(data=grid, aes(x=X, y=Y), color='black', shape = 3) +
geom_point(data=prov.grid, aes(x=X, y=Y), color='red', shape = 3)+
geom_point(data=mydata,aes(x=X,y=Y,shape="Point de mesure"),color="black")+
ggtitle("Limite de la province étudiée (Liège) et positions des points de mesures")+
xlab("Longitude (Lambert belge 1972)")+
ylab("Latitude (Lambert belge 1972)")+
scale_shape_manual("",values=15)
mydata %>%
select(Pb, Zn, Cu) %>%
summary %>%
pander()
ggplot(Pb, aes(x = Pb)) +
geom_histogram(aes(y = ..density..,
fill = "Density histogram" ),
bins = 15,
color = "white") +
geom_density(col = "lightsteelblue3",
aes(fill = "Fitted pdf"),
alpha = 0.2) +
xlab("Pb") +
ylab("f(x)") +
ggtitle("Density histogram of the plomb") +
stat_function(fun=dnorm,
args=list(mean = mean(Pb$Pb), sd = sd(Pb$Pb)),
aes(color="Normal pdf"),
size= 1) +
scale_fill_manual("", values = c("Density histogram"="lightsteelblue2",
"Fitted pdf"=alpha("lightsteelblue3",.2))) +
scale_color_manual("", values="red")
# Chunk 1: setup
rm(list=ls()) # Clean the workspace
library(data.table)
library(ggplot2)
library(gridExtra)
library(PerformanceAnalytics)
library(car)
library(rgl)
library(gstat)
library(latticeExtra)
library(AID)
library(rgdal)
library(raster)
library(broom)
library(RColorBrewer)
library(rgeos)
library(dplyr)
library(sf)
library(pander)
# Chunk 2
mydata <- fread('data.csv')
summary(mydata)
head(mydata)
# Chunk 3
# Create grid (using a margin to make sure you englobe the whole province)
gridsize = 1000
margin = 5000
x <- seq(floor(min(mydata$X)-margin), # from minimum longitude
ceiling(max(mydata$X+margin)), # to maximum longitude
by=gridsize)
y <- seq(floor(min(mydata$Y)-margin), # from minimum latitude
ceiling(max(mydata$Y)+margin), # to maximum latitude
by=gridsize)
grid <- as.data.table(expand.grid(X=x, Y=y))
# Create a spatial version of your grid
mydataSpatial <- copy(grid)
coordinates(mydataSpatial) <- ~X+Y
proj4string(mydataSpatial) <- CRS("+init=epsg:31370") # Specify coordinate system (Lambert belge 1972)
# Chunk 4
# Load provinces shapefile and specify it's coordinate system
prov <- readOGR('BEL_ADM2.shp', use_iconv = TRUE, encoding = "UTF-8")
prov <- spTransform(prov, CRS("+init=epsg:31370"))
plot(prov) # Display provinces
prov$NAME_2
# Transform grid coordinates system to match provinces
mydataSpatial <- spTransform(mydataSpatial, CRS("+init=epsg:31370"))
# Get index of points in the province of Liège
prov.id <- over(prov[prov$NAME_2 == "Liège", ],
mydataSpatial,
returnList = TRUE)
# Select rows in your original grid that are located in Liège
prov.grid = grid[prov.id[[1]],]
# Chunk 5
# Display selected grid points in red and data location
ggplot()+
geom_point(data=prov.grid, aes(x=X, y=Y), color='black', shape = 3)+
geom_point(data=grid, aes(x=X, y=Y), color='black', shape = 3) +
geom_point(data=prov.grid, aes(x=X, y=Y), color='red', shape = 3)+
geom_point(data=mydata,aes(x=X,y=Y,shape="Point de mesure"),color="black")+
ggtitle("Limite de la province étudiée (Liège) et positions des points de mesures")+
xlab("Longitude (Lambert belge 1972)")+
ylab("Latitude (Lambert belge 1972)")+
scale_shape_manual("",values=15)
# Chunk 6
Pb <- na.omit(subset(mydata,select=c("X","Y","Pb")))
ggplot() +
geom_point(data=Pb, aes(x=X, y=Y, color=Pb), size=2) +
scale_color_gradient(low='blue',high ='yellow')+
xlab("Longitude") +
ylab("Latitude") +
ggtitle("Sample Pb")
# Chunk 7
Zn <- na.omit(subset(mydata,select=c("X","Y","Zn")))
#Plot
ggplot() +
geom_point(data=Zn, aes(x=X, y=Y, color=Zn), size=2) +
scale_color_gradient(low='blue',high ='yellow')+
xlab("Longitude") +
ylab("Latitude") +
ggtitle("Sample Zn")
# Chunk 8
Cu <- na.omit(subset(mydata,select=c("X","Y","Cu")))
#Plot
ggplot() +
geom_point(data=Cu, aes(x=X, y=Y, color=Cu), size=2) +
scale_color_gradient(low='blue',high ='yellow')+
xlab("Longitude") +
ylab("Latitude") +
ggtitle("Sample Cu")
# Chunk 9
mydata %>%
select(Pb, Zn, Cu) %>%
summary %>%
pander()
ggplot(Pb, aes(x = Pb)) +
geom_histogram(aes(y = ..density..,
fill = "Density histogram" ),
bins = 15,
color = "white") +
geom_density(col = "lightsteelblue3",
aes(fill = "Fitted pdf"),
alpha = 0.2) +
xlab("Pb") +
ylab("f(x)") +
ggtitle("Density histogram of the plomb") +
stat_function(fun=dnorm,
args=list(mean = mean(Pb$Pb), sd = sd(Pb$Pb)),
aes(color="Normal pdf"),
size= 1) +
scale_fill_manual("", values = c("Density histogram"="lightsteelblue2",
"Fitted pdf"=alpha("lightsteelblue3",.2))) +
scale_color_manual("", values="red")
chart.Correlation(mydata[,.(Zn,Pb,Cu)])
# Plomb
BPb <- boxcoxnc(Pb$Pb, verbose = FALSE)
Pb$Pbbx <- BPb$tf.data
mydata %>%
select(Pb, Zn, Cu) %>%
summary %>%
pander()
chart.Correlation(mydata[,.(Zn,Pb,Cu)])
mydata <- fread('data.csv')
summary(mydata)
head(mydata)
