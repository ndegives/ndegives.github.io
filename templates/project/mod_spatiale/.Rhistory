mydata <- fread('data.csv')
rm(list=ls()) # Clean the workspace
library(data.table)
library(ggplot2)
library(gridExtra)
library(PerformanceAnalytics)
library(car)
library(rgl)
library(gstat)
library(latticeExtra)
library(AID)
library(rgdal)
library(raster)
library(broom)
library(RColorBrewer)
library(rgeos)
library(dplyr)
library(sf)
library(pander)
mydata <- fread('data.csv')
summary(mydata)
head(mydata)
Prov<-readOGR(dsn="ExtraData/BEL_adm",layer="BEL_adm2")
#On change le syst?me de coordonn?es en un syst?me de projection L72
Prov72<-spTransform(Prov,CRS=CRS("+init=epsg:31370")) #CRS code
# Create grid (using a margin to make sure you englobe the whole province)
gridsize = 1000
margin = 5000
x <- seq(floor(min(mydata$X)-margin), # from minimum longitude
ceiling(max(mydata$X+margin)), # to maximum longitude
by=gridsize)
y <- seq(floor(min(mydata$Y)-margin), # from minimum latitude
ceiling(max(mydata$Y)+margin), # to maximum latitude
by=gridsize)
grid <- as.data.table(expand.grid(X=x, Y=y))
# Create a spatial version of your grid
mydataSpatial <- copy(grid)
coordinates(mydataSpatial) <- ~X+Y
proj4string(mydataSpatial) <- CRS("+init=epsg:31370") # Specify coordinate system (Lambert belge 1972)
# Load provinces shapefile and specify it's coordinate system
provinces <- readOGR('ExtraData/BEL_adm/BEL_adm2.shp', use_iconv = TRUE, encoding = "UTF-8")
# Load provinces shapefile and specify it's coordinate system
provinces <- readOGR('BEL_adm2.shp', use_iconv = TRUE, encoding = "UTF-8")
# Load provinces shapefile and specify it's coordinate system
provinces <- readOGR('BEL_ADM2.shp', use_iconv = TRUE, encoding = "UTF-8")
# Load provinces shapefile and specify it's coordinate system
provinces <- readOGR('BEL_ADM2.shp', use_iconv = TRUE, encoding = "UTF-8")
# Create grid (using a margin to make sure you englobe the whole province)
gridsize = 1000
margin = 5000
x <- seq(floor(min(mydata$X)-margin), # from minimum longitude
ceiling(max(mydata$X+margin)), # to maximum longitude
by=gridsize)
y <- seq(floor(min(mydata$Y)-margin), # from minimum latitude
ceiling(max(mydata$Y)+margin), # to maximum latitude
by=gridsize)
grid <- as.data.table(expand.grid(X=x, Y=y))
# Create a spatial version of your grid
mydataSpatial <- copy(grid)
coordinates(mydataSpatial) <- ~X+Y
proj4string(mydataSpatial) <- CRS("+init=epsg:31370") # Specify coordinate system (Lambert belge 1972)
# Load provinces shapefile and specify it's coordinate system
provinces <- readOGR('BEL_ADM2.shp', use_iconv = TRUE, encoding = "UTF-8")
Prov<-readOGR(dsn="ExtraData/BEL_adm",layer="BEL_adm2")
Prov<-readOGR(dsn="BEL_ADM2",layer="BEL_adm2")
Prov<-readOGR(dsn="BEL_ADM2.shp",layer="BEL_adm2")
Prov<-readOGR(dsn="BEL_ADM2.shp")
#On change le syst?me de coordonn?es en un syst?me de projection L72
Prov72<-spTransform(Prov,CRS=CRS("+init=epsg:31370")) #CRS code
#transformation du polygone en dataframe
Provdf<-tidy(Prov72)
#fusion du dataframe avec la table d'attribut
Prov72$id<-rownames(Prov72@data)
#On appelle le Provdf
Provdf<-left_join(Provdf,Prov72@data,by="id")
#transformation de la dataframe en datatable
Provdt<-as.data.table(Provdf)
#s?l?ction des lignes correspondant ? la province de Li?ge
Liegedt<-Provdt[7165:7892,]
shp_liege <- st_read(
"liege.shp")
prov<-readOGR(dsn="BEL_ADM2.shp")
#On change le syst?me de coordonn?es en un syst?me de projection L72
prov<-spTransform(Prov,CRS=CRS("+init=epsg:31370")) #CRS code
plot(prov)
# Load provinces shapefile and specify it's coordinate system
prov <- readOGR('BEL_adm2.shp', use_iconv = TRUE, encoding = "UTF-8")
#On change le syst?me de coordonn?es en un syst?me de projection L72
prov<-spTransform(Prov,CRS=CRS("+init=epsg:31370")) #CRS code
plot(prov)
rm(list=ls()) # Clean the workspace
library(data.table)
library(ggplot2)
library(gridExtra)
library(PerformanceAnalytics)
library(car)
library(rgl)
library(gstat)
library(latticeExtra)
library(AID)
library(rgdal)
library(raster)
library(broom)
library(RColorBrewer)
library(rgeos)
library(dplyr)
library(sf)
library(pander)
mydata <- fread('data.csv')
summary(mydata)
head(mydata)
# Create grid (using a margin to make sure you englobe the whole province)
gridsize = 1000
margin = 5000
x <- seq(floor(min(mydata$X)-margin), # from minimum longitude
ceiling(max(mydata$X+margin)), # to maximum longitude
by=gridsize)
y <- seq(floor(min(mydata$Y)-margin), # from minimum latitude
ceiling(max(mydata$Y)+margin), # to maximum latitude
by=gridsize)
grid <- as.data.table(expand.grid(X=x, Y=y))
# Create a spatial version of your grid
mydataSpatial <- copy(grid)
coordinates(mydataSpatial) <- ~X+Y
proj4string(mydataSpatial) <- CRS("+init=epsg:31370") # Specify coordinate system (Lambert belge 1972)
# Load provinces shapefile and specify it's coordinate system
prov <- readOGR('BEL_adm2.shp', use_iconv = TRUE, encoding = "UTF-8")
prov <- spTransform(prov, CRS("+init=epsg:31370"))
plot(prov) # Display provinces
provinces$NAME_2
prov$NAME_2
View(prov)
# Load provinces shapefile and specify it's coordinate system
prov <- readOGR('provinces_L72.shp', use_iconv = TRUE, encoding = "UTF-8")
